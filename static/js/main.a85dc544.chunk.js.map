{"version":3,"sources":["landing/components/NavBar.js","landing/components/HamNav.js","landing/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","marginLeft","spacing","paddingRight","padding","link","NavBar","classes","preventDefault","event","Typography","className","Link","href","onClick","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","height","appBarShift","width","easeOut","enteringScreen","marginRight","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","mixins","toolbar","justifyContent","content","contentShift","HamNav","useTheme","React","useState","open","setOpen","CssBaseline","AppBar","position","clsx","Toolbar","variant","noWrap","IconButton","color","aria-label","edge","Drawer","anchor","paper","direction","Divider","nav","textAlign","palette","text","secondary","breakpoints","down","promo1","promo2","FullWidthGrid","getWindowDimensions","windowDimensions","setWindowDimensions","useEffect","handleResize","window","addEventListener","removeEventListener","Grid","container","item","xs","Paper","sm","style","backgroundColor","innerWidth","innerHeight","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a85dc544.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n      marginLeft: theme.spacing(2),\r\n      paddingRight:\"10%\",\r\n      padding:\"2vh\",\r\n  },\r\n  link: {\r\n      paddingRight:\"5%\",\r\n  }\r\n}));\r\n\r\nexport default function NavBar() {\r\n  const classes = useStyles();\r\n  const preventDefault = event => event.preventDefault();\r\n\r\n  return (\r\n    <Typography className={classes.root} >\r\n      <Link href=\"#\" onClick={preventDefault} className={classes.link}>\r\n        Link1\r\n      </Link>\r\n      <Link href=\"#\" onClick={preventDefault} className={classes.link}>\r\n        Link2\r\n      </Link>\r\n      <Link href=\"#\" onClick={preventDefault} className={classes.link}>\r\n        Link3\r\n      </Link>\r\n    </Typography>\r\n  );\r\n}","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport NavBar from './NavBar';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    height: '6vh',\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: drawerWidth,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-start',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginRight: -drawerWidth,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginRight: 0,\r\n  },\r\n}));\r\n\r\nexport default function HamNav() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" noWrap className={classes.title}>\r\n          </Typography>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"end\"\r\n            onClick={handleDrawerOpen}\r\n            className={clsx(open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <div className={classes.drawerHeader} />\r\n      </main>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"right\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <NavBar />\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport './LandingPage.css';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport NavBar from './components/NavBar';\r\nimport HamNav from './components/HamNav';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    nav: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'right',\r\n        color: theme.palette.text.secondary,\r\n        height: '8vh',\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: '6vh',\r\n        }\r\n    },\r\n    promo1: {\r\n        height: '92vh',\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: '47vh',\r\n        }\r\n    },\r\n    promo2: {\r\n        height: '100vh',\r\n        [theme.breakpoints.down('xs')]: {\r\n            height: '47vh',\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function FullWidthGrid() {\r\n    const classes = useStyles();\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n    \r\n    useEffect(() => {\r\n        function handleResize() {\r\n            setWindowDimensions(getWindowDimensions());\r\n        }\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n    \r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container spacing={0}>\r\n                <Grid item xs={12} >\r\n                    {(windowDimensions.width>600)?<Paper className={classes.nav}><NavBar /></Paper>:<Paper className={classes.nav}><HamNav /></Paper>}\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <div className={classes.promo1} style={{ backgroundColor: 'Orange' }}>Image1</div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <div className={classes.promo1} style={{ backgroundColor: 'Pink' }}>Text1 (Scroll down!)</div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <div className={classes.promo2} style={{ backgroundColor: 'red' }}>Text2</div>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <div className={classes.promo2} style={{ backgroundColor: 'Yellow' }}>Image2</div>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\n\r\n//@Yalcin Delete the inline styles\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}","import React from 'react';\nimport './App.css';\nimport LandingPage from './landing/LandingPage';\n\nfunction App() {\n  return (\n    <div>\n      <LandingPage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}